C4 Compiler Code Statistics Summary  
=====================================

1. Lines of Code (LOC) and Function Sizes  
---------------------------------------  
- Total LOC:** 486 lines (as measured by Lizard, excluding comments and blank lines)  
- Number of Functions: 4  
- Function Breakdown: 
   - next(): 84 LOC (lines 48–132)  
   - expr(): 147 LOC (lines 134–282)  
   - stmt(): 47 LOC (lines 284–331)  
   - main(): 181 LOC (lines 333–528)

2. Cyclomatic Complexity (CCN) 
--------------------------------  
Measured via Lizard and pmccabe, the cyclomatic complexity for each function is:  
   - next(): 85  
   - expr(): 91  
   - stmt(): 15  
   - main(): 100  
Average CCN: (85 + 91 + 15 + 100) / 4 ≈ 72.8  
Note: Higher CCN values indicate more complex branching and loop structures.

3. Global Variables and Their Usage  
-------------------------------------  
A total of 14 global variables are used throughout the compiler to manage state across functions. Their roles include:  
   - p, lp: Pointers to the current source code position and the beginning of the current line, respectively.  
   - data: Pointer to the data area for storing global variables and string literals.  
   - e, le: Pointers used for code generation; they mark the beginning and current position in the emitted opcode array.  
   - id, sym: Pointer to the current identifier and the overall symbol table (storing identifier metadata).  
   - tk, ival: Variables for the current token and its numerical value.  
   - ty, loc: Variables for the current expression type (e.g., INT, CHAR, pointer level) and local variable offset.  
   - line: A counter for the current source code line (useful for error reporting).  
   - src, debug: Flags to control whether source/assembly output is printed and to enable debugging output during execution.

4. Unique Tokens and Their Frequency  
---------------------------------------  
The compiler defines approximately 36 unique token types (values starting from 128). Below is a breakdown of the token types and their observed frequency (manual count):

   - Num: 8  
   - Fun: 3  
   - Sys: 3  
   - Glo: 3  
   - Loc: 7  
   - Id: 10  
   - Char: 8  
   - Else: 2  
   - Enum: 2  
   - If: 2  
   - Int: 8  
   - Return: 2  
   - Sizeof: 2  
   - While: 3  
   - Assign: 13  
   - Cond: 4  
   - Lor: 3  
   - Lan: 4  
   - Or: 4  
   - Xor: 4  
   - And: 5  
   - Eq: 4  
   - Ne: 3  
   - Lt: 5  
   - Gt: 3  
   - Le: 3  
   - Ge: 3  
   - Shl: 7  
   - Shr: 3  
   - Add: 6  
   - Sub: 4  
   - Mul: 11  
   - Div: 3  
   - Mod: 3  
   - Inc: 18  
   - Dec: 4  
   - Brak: 3  

Note: While an automated frequency count was not performed, the majority of tokens are identifiers, numeric literals, and various operators.

5. Branches, Loops, and Nesting Levels  
---------------------------------------  
- Branching Constructs:  
  The code includes multiple conditional branches (e.g., `if/else` statements and the ternary operator).  
- Loop Constructs: 
  The primary loop used is the `while` loop, which appears in both the lexical analysis and the virtual machine execution.  
- Nesting Levels:  
  The cyclomatic complexity metrics indicate that some functions (e.g., `main()` with a CCN of 100) have deep nesting. In our analysis, nesting levels range roughly from 3 to 5 levels deep in complex functions.  
Observation: High CCN values (15–100) imply that there are many branches and loops; while this is acceptable in a minimal compiler, it highlights the potential for increased complexity and maintenance challenges.

6. Memory Usage Patterns  
--------------------------------  
Heap Allocation: 
- The compiler pre-allocates large contiguous memory blocks for several purposes:  
  - Symbol Table Area, Text Area, Data Area, and Stack  
- Analysis via Valgrind indicates approximately 1.25 MB of heap memory is used, with six malloc calls: five allocating 256 KB each and one allocating 1 KB.  
- A leak summary from Valgrind shows that 262,144 bytes (1 block) are "definitely lost" and 1,048,576 bytes remain "still reachable," suggesting that many allocated blocks are not freed by the program termination.  

Stack Usage:  
- The virtual machine is stack-based, using the runtime stack for managing local variables, function calls, and intermediate expression evaluations.  
- Due to the pre-allocation of a large memory pool for the stack, the program minimizes the overhead of frequent dynamic memory allocation during execution.

7. Tools Used for Analysis  
--------------------------------  
Static Analysis:  
- Cppcheck: Detected warnings related to missing system headers and type mismatches in printf format specifiers.  
- Lizard: Provided LOC and cyclomatic complexity metrics per function.  
- pmccabe: Confirmed the cyclomatic complexity values (e.g., next() = 85, expr() = 91, stmt() = 15, main() = 100).  
- Clang Static Analyzer (scan-build): Ran successfully with no bugs reported.

Dynamic Analysis:  
- Gprof: Used for profiling function execution (compiled with the `-pg` flag, and results generated in gprof_report.txt).  
- Valgrind: Optional tool for memory leak detection and profiling; analysis indicates significant heap usage and some memory that remains allocated at program termination.

=====================================

This summary consolidates the statistics gathered from static tools (Lizard, pmccabe, Cppcheck, scan-build) and dynamic tools (Gprof, Valgrind) and provides a comprehensive view of the C4 compiler's codebase, complexity, and memory usage patterns.
